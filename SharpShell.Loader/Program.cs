using System.Reflection;
using System.Runtime.Loader;
using AutoGenerated;

namespace SharpShell.Loader
{
    internal class Program
    {
        // See generate_embedded.py
        private static readonly string[] BlacklistedDependencies = ["System.Management.Automation"];

        static void Main(string[] args)
        {
            GC.Collect();

            AppDomain.CurrentDomain.AssemblyResolve += static (sender, eventArgs) =>
            {
                GC.Collect();

                var name = new AssemblyName(eventArgs.Name).Name!;

                if (Dependencies.Files.ContainsKey(name.ToLower()))
                {
                    using var ms = new MemoryStream(Dependencies.Files[name.ToLower()]);
                    return AssemblyLoadContext.Default.LoadFromStream(ms);
                }

                var dllLocalPath = Path.Combine(Directory.GetCurrentDirectory(), name + ".dll");
                if (BlacklistedDependencies.Contains(name))
                    return AssemblyLoadContext.Default.LoadFromAssemblyPath(dllLocalPath);

                if (File.Exists(dllLocalPath))
                {
                    var dll = File.ReadAllBytes(dllLocalPath);
                    var ms = new MemoryStream(dll);
                    return AssemblyLoadContext.Default.LoadFromStream(ms);
                }

                return null;
            };

            var shell = Assembly.Load("SharpShell");
            var program = shell.GetType("SharpShell.Program")!;
            var main = program.GetMethod("Main", BindingFlags.Static | BindingFlags.NonPublic)!;
            main.Invoke(null, [Array.Empty<string>()]);
        }
    }
}
